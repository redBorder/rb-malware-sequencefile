package net.redborder.malware.sequencefile.leader;

import net.redborder.clusterizer.ZkTasksHandler;
import net.redborder.malware.sequencefile.managers.OozieManager;
import net.redborder.malware.sequencefile.util.ConfigFile;
import net.redborder.malware.sequencefile.util.logger.RbLogger;
import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.api.CuratorWatcher;
import org.apache.curator.framework.imps.CuratorFrameworkState;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.codehaus.jackson.map.ObjectMapper;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.apache.log4j.Logger;

/**
 * Created by Maria on 26/02/15.
 */
public class OozieLeader extends Thread {

    private static final long ONE_MINUTE = 60000;
    private OozieManager oozieManager;
    private Boolean running = false;
    private ZkTasksHandler oozieTasksHandler;
    CuratorFramework client;
    ObjectMapper mapper;
    TaskWatcher incomingTaskWatcher;
    Queue<String> incomingSeqFiles;

    private Logger log = null;
    String hostname;
    final Object waitTasks = new Object();


    public OozieLeader() {
        init();
    }

    private void init() {
        incomingSeqFiles = new ConcurrentLinkedQueue<>();
        mapper = new ObjectMapper();
        log = RbLogger.getLogger(OozieLeader.class);
        log.info("OozieLeader:  Running init()");

        // Starting a ZK client
        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
        client = CuratorFrameworkFactory.newClient(ConfigFile.getInstance().getZkConnect(), retryPolicy);
        client.start();
        // Setting a ZKTaskHandler to send task to OozieManagers
        oozieTasksHandler = new ZkTasksHandler(ConfigFile.getInstance().getZkConnect(), "/rb_malware/oozie/leader");

        // Adding a new OozieManager
        oozieManager = OozieManager.getInstance();
        oozieTasksHandler.addListener(oozieManager);

        // OozieLeader look for incoming tasks
        incomingTaskWatcher = new TaskWatcher();

        try {
            if (client.checkExists().forPath("/rb_malware/oozie/peontasks") == null) {
                client.create().forPath("/rb_malware/oozie/peontasks");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }


        try {
            hostname = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        try {
            if (client.checkExists().forPath("/rb_malware/oozie/tasks") == null) {
                client.create().forPath("/rb_malware/oozie/tasks");
                client.getChildren().usingWatcher(incomingTaskWatcher).forPath("/rb_malware/oozie/tasks");
            } else {
                client.delete().forPath("/rb_malware/oozie/tasks");
                client.create().forPath("/rb_malware/oozie/tasks");
                client.getChildren().usingWatcher(incomingTaskWatcher).forPath("/rb_malware/oozie/tasks");
            }

            Thread.sleep(10000);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        running = true;
    }

    // Run a sequenceManager
    @Override
    public synchronized void start() {
        super.start();
        oozieManager.start();
    }


    public void waitTasks() {
        synchronized (waitTasks) {
            try {
                waitTasks.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    public void notifyTasks() {
        synchronized (waitTasks) {
            waitTasks.notifyAll();
        }
    }

    @Override
    public void run() {
        log.info("Am I leader? " + oozieTasksHandler.isLeader());
        while (running) {
            if (oozieTasksHandler.isLeader()) {
                //The leader must watch for incoming Tasks and send them to an OozieManager using oozieTasksHandler
                try {

                    // If there were any incoming file, we go to sleep
                    waitTasks();

                    if (running) {
                        //If there are an incoming File, we write them in /rb_malware/oozie/peontasks
                        String seqFile;

                        while ((seqFile = incomingSeqFiles.poll()) != null) {
                            // seqFile = incomingSeqFiles.remove(0);
                            log.info("New File: " + seqFile + " -- Waiting Files: " + incomingSeqFiles.size());

                        /*// We send the files to the OozieManager*/

                            String taskName = UUID.randomUUID().toString();
                            log.info("New Task set in '/rb_malware/oozie/peontasks/" + taskName + "' ");
                            // Create a task and order a SequenceManager to work
                            client.create().forPath("/rb_malware/oozie/peontasks/" + taskName, seqFile.getBytes());
                            oozieTasksHandler.goToWork(true);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else {
                try {
                    log.info("OozieLeader: Sleeping...");

                    Thread.sleep(ONE_MINUTE);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

    }

    public void close() {
        running = false;
        oozieManager.close();
        notifyTasks();
    }

    /*
     * This Class look for an incoming task in /rb_malware/oozie/tasks
     */
    public class TaskWatcher implements CuratorWatcher {

        @Override
        public void process(WatchedEvent watchedEvent) throws Exception {
            Watcher.Event.EventType type = watchedEvent.getType();
            if (type.equals(Watcher.Event.EventType.NodeChildrenChanged)) {
                if (oozieTasksHandler.isLeader()) {

                    log.debug("New task: " + client.getChildren().forPath(watchedEvent.getPath()).get(0));
                    String eventPath = watchedEvent.getPath() + "/" + client.getChildren().forPath(watchedEvent.getPath()).get(0);
                    byte[] zkData = client.getData().forPath(eventPath);
                    //  We delete the readed incoming-task
                    client.delete().forPath(eventPath);

                    //String contained at zk
                    String seqFile = new String(zkData, "UTF-8");
                    incomingSeqFiles.add(seqFile);
                    log.info("Name of the incoming task: " + seqFile);

                    notifyTasks();
                } else {
                    log.info(" But im not the leader, so lets ignore it.");
                }
            }

            if (client.getState().equals(CuratorFrameworkState.STARTED)) {
                // incomingTaskManager go on Watching a new incoming task
                client.getChildren().usingWatcher(incomingTaskWatcher).forPath("/rb_malware/oozie/tasks");
            }
        }
    }

}
