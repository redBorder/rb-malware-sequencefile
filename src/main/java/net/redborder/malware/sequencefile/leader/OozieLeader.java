package net.redborder.malware.sequencefile.leader;

import net.redborder.malware.sequencefile.managers.OozieManager;
import net.redborder.malware.sequencefile.util.ConfigFile;
import net.redborder.malware.sequencefile.util.logger.RbLogger;
import net.redborder.taskassigner.ZkTasksHandler;
import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.api.CuratorWatcher;
import org.apache.curator.framework.imps.CuratorFrameworkState;
import org.apache.curator.framework.recipes.locks.InterProcessSemaphoreV2;
import org.apache.curator.framework.recipes.locks.Lease;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;
import org.codehaus.jackson.map.ObjectMapper;
import org.jets3t.service.ServiceException;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by Maria on 26/02/15.
 */
public class OozieLeader extends Thread {

    private static final long ONE_MINUTE = 60000;
    private static final Integer MAX_OOZIE_TASK = 4;
    private OozieManager oozieManager;
    private Boolean running = false;

    // Library of task. Is used for:
    //      - Set the Oozie Leader
    //      - Order a new task for an OozieManager
    private ZkTasksHandler oozieTasksHandler;
    // Client of ZK
    CuratorFramework client;
    // User for write in ZK
    ObjectMapper mapper;
    // Incoming task
    private Queue<Lease> incomingTask;
    TaskWatcher incomingTaskWatcher;
    // Name of the incoming files
    String incomingFiles;

    // Auxiliar vars
    private Logger log = null;
    String hostname;
    InterProcessSemaphoreV2 semaphore;
    int i = 1;
    String taskName = null;



    public OozieLeader()
    {
        init();
    }

    private void init() {
        incomingFiles="";
        mapper = new ObjectMapper();
        log = RbLogger.getLogger(OozieLeader.class.getName());
        log.log(Level.INFO, "OozieLeader:  Running init()");

        // Starting a ZK client
        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
        client = CuratorFrameworkFactory.newClient(ConfigFile.getInstance().getZkConnect(), retryPolicy);
        client.start();
        // Setting a ZKTaskHandler to send task to OozieManagers
        oozieTasksHandler = new ZkTasksHandler(ConfigFile.getInstance().getZkConnect(), "/rb_malware2/oozie/peon/tasks");
        // Adding a new OozieManager
        oozieManager = new OozieManager();
        System.out.println("OozieLeader: Added Oozie manager listener");
        oozieTasksHandler.addListener(oozieManager);
        System.out.println("OozieLeader: NUM WORKERS: " + oozieTasksHandler.numWorkers());
        // Max number of sequence files to analyze
        Integer max_oozie_task = oozieTasksHandler.numWorkers() * MAX_OOZIE_TASK.intValue();
        semaphore = new InterProcessSemaphoreV2(client, "/rb_malware2/oozie/semaphore", max_oozie_task);

        // I think it is not needed
        // semaphore = new InterProcessSemaphoreV2(client, "/rb_malware2/oozie/semaphore", max_seq_files);

        // OozieLeader look for incoming tasks
        incomingTask = new LinkedList<>();
        incomingTaskWatcher = new TaskWatcher();

        // We create two paths in zookeeper:
        //     - /rb_malware2/oozie/tasks: this need a taskWatcher
        //     - /rb_malware2/oozie/peon/tasks
        try {
            if (client.checkExists().forPath("/rb_malware2/oozie/peon/tasks") == null) {

                client.create().forPath("/rb_malware2/oozie/peon/tasks");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            hostname= InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            e.printStackTrace();
        }
        try {
            if (client.checkExists().forPath("/rb_malware2/oozie/tasks") == null) {
                client.create().forPath("/rb_malware2/oozie/tasks");
                client.getChildren().usingWatcher(incomingTaskWatcher).forPath("/rb_malware2/oozie/tasks");
            } else {
                client.delete().forPath("/rb_malware2/oozie/tasks");
                System.out.println("OozieLeader: Exists old state, I recovery and create again!");
                client.create().forPath("/rb_malware2/oozie/tasks");
                client.getChildren().usingWatcher(incomingTaskWatcher).forPath("/rb_malware2/oozie/tasks");
            }

            Thread.sleep(10000);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        running = true;

    }

    // Run a sequenceManager
    @Override
    public synchronized void start() {
        super.start();
        oozieManager.start();
    }

    @Override
    public void run() {
        log.log(Level.INFO, "Oozie Leader: LEADER: " + oozieTasksHandler.isLeader());
        while (running) {
            if(oozieTasksHandler.isLeader())
            {
                //The leader must watch for incoming Tasks and send them to an OozieManager using oozieTasksHandler
                try {

                    //If there are an incoming File, we write them in /rb_malware2/oozie/peon/tasks
                    if (!incomingFiles.equals(""))
                    {
                        log.log(Level.INFO, "OozieLeader - New File: " + incomingFiles );

                        /*
                        *      We split the incomingFiles y an Array (Not Needed)
                        */

                        /*// We send the files to the OozieManager*/
                        log.log(Level.INFO, "SETTING TASK: " + i);
                        i++;

                        taskName = UUID.randomUUID().toString();
                        log.log(Level.INFO, "TaskName es: " + taskName);
                        // Create a task and order a SequenceManager to work
                        client.create().forPath("/rb_malware2/oozie/peon/tasks/" + taskName, incomingFiles.getBytes());
                        oozieTasksHandler.goToWork(true);

                        // task_assigned = " (" + tasks + ") ";

                        incomingFiles="";
                    }
                    else {
                        String message = "OozieLeader: Waiting tasks";
                        for(int i = 0; i<5; i++) {

                            System.out.print(message);
                            message=".";
                            Thread.sleep(2000);
                        }
                        System.out.println("");
                    }


                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
            else {
                try {
                    log.log(Level.INFO, "OozieLeader: Sleeping...");

                    Thread.sleep(ONE_MINUTE);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

    }

    public void close() {
        running = false;
        oozieManager.close();
    }

    // This class is used for whatching a semaphore. I need ir to Watch /rb_malware/oozie/task

    public class TaskWatcher implements CuratorWatcher {

        @Override
        public void process(WatchedEvent watchedEvent) throws Exception {
            System.out.println("OozieLeader: " + Thread.currentThread().getId() + " [WATCH] WorkersWatcher: " + watchedEvent);
            Watcher.Event.EventType type = watchedEvent.getType();
            if (type.equals(Watcher.Event.EventType.NodeChildrenChanged)) {
                System.out.println("OozieLeader: Incoming task added!");
                if (oozieTasksHandler.isLeader()) {
                    String eventPath =  watchedEvent.getPath() + "/" + client.getChildren().forPath(watchedEvent.getPath()).toString().replace("[", "").replace("]","");
                    byte[] zkData = client.getData().forPath(eventPath);
                    //  We delete the readed incoming-task
                    client.delete().forPath(eventPath);

                    //String contained at zk
                    incomingFiles = new String(zkData, "UTF-8");
                    log.log(Level.INFO,"OozieLeader: Name of the incoming task: " + incomingFiles);

                    // log.log(Level.INFO, "Oozie Manager has finished!");

                    // We locked the semaphore
                    // semaphore.returnLease(incomingTask.remove());
                } else {
                    System.out.println("OozieLeader:  But im not the leader, so lets ignore it.");
                }
            }

            if (client.getState().equals(CuratorFrameworkState.STARTED)) {
                // incomingTaskManager go on Watching a new incoming task
                client.getChildren().usingWatcher(incomingTaskWatcher).forPath("/rb_malware2/oozie/tasks");
            }
        }
    }

}
