package net.redborder.malware.sequencefile.leader;

import net.redborder.malware.sequencefile.managers.OozieManager;
import net.redborder.taskassigner.ZkTasksHandler;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.api.CuratorWatcher;
import org.apache.curator.framework.imps.CuratorFrameworkState;
import org.apache.zookeeper.WatchedEvent;
import org.apache.zookeeper.Watcher;

import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by Maria on 26/02/15.
 */
public class OozieLeader extends Thread {

    private Logger log = null;
    private OozieManager oozieManager;
    private Boolean running = false;
    // Library of task. Is used fo:
    //      - Set the Oozie Leader
    //      - Order a OozieManager a task
    private ZkTasksHandler sequenceTasksHandler;
    // Client of ZK
    CuratorFramework client;



    private void init() {
        System.out.println("OozieLeader: Running init()");
    }

    // Run a sequenceManager
    @Override
    public synchronized void start() {
        super.start();
        oozieManager.start();
    }

    @Override
    public void run() {

    }

    public void close() {
        running = false;
        //oozieManager.close();
    }

         /* //Esto lo mira el leader
        try {
            if (client.checkExists().forPath("/rb_malware/oozie/tasks") == null) {

                client.create().forPath("/rb_malware/oozie/tasks");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        */

    /*
    // This class is used for whatching a semaphore. I think that this is not needed

    public class LeaseWatcher implements CuratorWatcher {

        @Override
        public void process(WatchedEvent watchedEvent) throws Exception {
            System.out.println(Thread.currentThread().getId() + " [WATCH] WorkersWatcher: " + watchedEvent);
            Watcher.Event.EventType type = watchedEvent.getType();
            if (type.equals(Watcher.Event.EventType.NodeChildrenChanged)) {
                System.out.println("Leases added!");
                if (sequenceTasksHandler.isLeader()) {
                    String eventPath =  watchedEvent.getPath() + "/" + client.getChildren().forPath(watchedEvent.getPath()).toString().replace("[", "").replace("]","");
                    byte[] zkData = client.getData().forPath(eventPath);
                    client.delete().forPath(eventPath);

                    //String contained at zk
                    // String str = new String(zkData, "UTF-8");

                    log.log(Level.INFO, "Oozie Manager has finished!");

                    semaphore.returnLease(leases.remove());
                } else {
                    System.out.println(" But im not the leader, so lets ignore it.");
                }
            }

            if (client.getState().equals(CuratorFrameworkState.STARTED)) {
                client.getChildren().usingWatcher(leaseWatcher).forPath("/rb_malware2/leases");
            }
        }
    }
    */
}
