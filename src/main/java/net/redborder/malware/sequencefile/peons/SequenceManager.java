package net.redborder.malware.sequencefile.peons;

import net.redborder.malware.sequencefile.SequenceFile;
import net.redborder.malware.sequencefile.util.ConfigFile;
import net.redborder.taskassigner.Task;
import net.redborder.taskassigner.TasksChangedListener;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/**
 * Created by andresgomez on 3/2/15.
 */
public class SequenceManager extends Thread implements TasksChangedListener {

    private Queue<SequencePeon> peons;
    private boolean running = false;
    private static final Long SECOND = 1000L;

    public SequenceManager() {
       init();
    }

    private void init(){
        peons = new LinkedList<SequencePeon>();
        running = true;
    }

    @Override
    public void run() {

        while(running || peons.size()>0){
            if(peons.size()>0){
                peons.remove().start();
            }else{
                try {
                    Thread.sleep(20*SECOND);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

    }

    @Override
    public void updateTasks(List<Task> list) {
        for (Task task : list) {
            SequenceFile sequenceFile = new SequenceFile(task.asMap());
            SequencePeon peon = new SequencePeon(sequenceFile);
            peons.add(peon);
        }
    }

    public void close(){
        running = false;
    }
}
