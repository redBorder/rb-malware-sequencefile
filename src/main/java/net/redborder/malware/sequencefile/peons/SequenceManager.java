package net.redborder.malware.sequencefile.peons;

import net.redborder.malware.sequencefile.SequenceFile;
import net.redborder.malware.sequencefile.util.ConfigFile;
import net.redborder.taskassigner.Task;
import net.redborder.taskassigner.TasksChangedListener;
import net.redborder.taskassigner.ZkTasksHandler;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

/**
 * Created by andresgomez on 3/2/15.
 */
public class SequenceManager extends Thread implements TasksChangedListener {

    private List<SequenceFile> sequenceFiles;
    private boolean running = false;
    private static final Long SECOND = 1000L;
    Object monitor = new Object();
    private ZkTasksHandler tasksHandler;


    public SequenceManager() {
        init();
    }

    private void init() {
        sequenceFiles = new ArrayList<>();
        running = true;
    }

    @Override
    public void run() {
        while (running) {
            waitTasks();
            List<SequencePeon> runningPeons = new ArrayList<>();

            for(SequenceFile file : sequenceFiles){
                SequencePeon peonTask = new SequencePeon(file);
                peonTask.start();
                runningPeons.add(peonTask);
            }

            List<String> hdfsSeqFiles = new ArrayList<>();

            for(SequencePeon peon : runningPeons){
                try {
                    peon.join();
                    hdfsSeqFiles.add(peon.getHdfsFile());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }

            //TODO --> Notificar al leader que el fichero esta listo y el nombre de los ficheros en hdfsSeqFiles.
            sequenceFiles.clear();
        }

    }

    @Override
    public void updateTasks(List<Task> list) {
        for (Task task : list) {
            SequenceFile sequenceFile = new SequenceFile(task.asMap());
            sequenceFiles.add(sequenceFile);
        }

        monitor.notifyAll();
    }

    public void waitTasks(){
            try {
                monitor.wait();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
    }

    public void close() {
        running = false;
    }
}
