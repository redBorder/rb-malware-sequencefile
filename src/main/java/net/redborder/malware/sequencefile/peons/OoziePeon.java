package net.redborder.malware.sequencefile.peons;

import net.redborder.malware.sequencefile.util.logger.RbLogger;
import org.apache.oozie.client.OozieClient;
import org.apache.oozie.client.WorkflowJob;

import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by Maria on 26/02/15.
 */
public class OoziePeon extends Thread {

    String input;
    String output;
    private Logger log = null;


    public OoziePeon(String in) {
        input=in;
        output="out-test";
    }

    public OoziePeon(String in,String out) {
        input=in;
        output=out;
    }

    public void run()
    {
        log = RbLogger.getLogger(OoziePeon.class.getName());
        log.log(Level.INFO, "OoziePeon: running");
        log.log(Level.INFO, "OoziePeon: scanning file: " + input);


        OozieClient cliente;
        Properties conf;

        // Getting a Oozie client
        cliente = new OozieClient("http://oozie.redborder.cluster:11000/oozie");

        // Setting configuration
        conf = cliente.createConfiguration();

        // Hadoop Configuration
        conf.setProperty("name_node","hdfs://hadoopnamenode.redborder.cluster:8020");
        conf.setProperty("job_tracker","hadoopresourcemanager.redborder.cluster:8032");
        conf.setProperty("queue_name","default");

        // Configure Oozie
        conf.setProperty(OozieClient.APP_PATH,"${name_node}/user/oozie/workflow");
        conf.setProperty("oozie.use.system.libpath","true");

        // SequenceFile Action
        conf.setProperty("sequence_file_output_path_name","${name_node}/user/oozie/sequence_file");
        conf.setProperty("aws_access_key","KIB8QYAP6Y1UM7FJ3FMC");
        conf.setProperty("aws_secret_key","6O1qH5QzNYKvkH1VVltQxoxPL4dvj9C7GaVRIw==");

        // Malware Pigs loaders
        conf.setProperty("malware_lib_path","${name_node}/user/oozie/lib");
        conf.setProperty("malware_library","${malware_lib_path}/pig-malware-1.0-jar-with-dependencies.jar");
        conf.setProperty("scripts_path","${malware_lib_path}/scripts");

        conf.setProperty("use_devshm","true");
        conf.setProperty("timeout_ms","180000");

        conf.setProperty("in_put_prefix_path", input);
        conf.setProperty("out_put_prefix_path","${name_node}/user/oozie/" + output);

        //  Virus Total Loader
        conf.setProperty("virustotal_api_key","1dd61f3357ee2a832f6253bb76406df1c71b549a99fc878fb584eb05f2acc3b1");

        //  Metascan Loader
        conf.setProperty("metascan_api_key","d228a40abc76cd1901807c7532839031");

        //  Hasher Loader

        //  Yara Loader
        conf.setProperty("yara_rules","${malware_lib_path}/yara_rules");

        //  Kaspersky Loader

        //  Cuckoo Loader
        conf.setProperty("max_retries","5");


        // Running workflow
        try{
            // Setting a Job
            String jobld = cliente.run(conf);
            System.out.println("Workflow job, " + jobld + "submitted");

            // Print the status every 10 seconds
            while (cliente.getJobInfo(jobld).getStatus()== WorkflowJob.Status.RUNNING) {
                System.out.println("Workflow  running...");
                Thread.sleep(10*1000);
            }
            log.log(Level.INFO, "Workflow  completed");
            log.log(Level.INFO, "Job ID: " + cliente.getJobInfo(jobld));

        } catch (Exception r) {
            System.out.println("Errors " + r.getLocalizedMessage());
            r.printStackTrace();
        }

    }

}
