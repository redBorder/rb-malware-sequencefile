package net.redborder.malware.sequencefile.peons;

import net.redborder.malware.sequencefile.util.logger.RbLogger;
import org.apache.oozie.client.OozieClient;
import org.apache.oozie.client.WorkflowJob;

import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by Maria on 26/02/15.
 */
public class OoziePeon extends Thread {

    String input;
    String output;
    private Logger log = null;
    String pathjob;
    String idjob;
    String statusjob;


    public OoziePeon(String in) {
        input=in;
        output="out-test";
        pathjob=input;
        idjob="";
        statusjob="";
    }

    public OoziePeon(String in,String out) {
        input=in;
        output=out;
    }

    public void run()
    {
        log = RbLogger.getLogger(OoziePeon.class.getName());
        log.log(Level.INFO, "OoziePeon: running");
        log.log(Level.INFO, "OoziePeon: scanning file: " + input);

        OozieClient client;
        Properties conf;

        // Getting a Oozie client
        client = new OozieClient("http://oozie.redborder.cluster:11000/oozie");

        // Setting configuration
        conf = client.createConfiguration();

        conf.setProperty("name_node","hdfs://hadoopnamenode.redborder.cluster:8020");
        conf.setProperty("job_tracker","hadoopresourcemanager.redborder.cluster:8032");
        conf.setProperty("queue_name","default");              //
        // Oozie Setting
        conf.setProperty(OozieClient.APP_PATH,"${name_node}/user/oozie/test/workflow.xml");
        conf.setProperty("oozie.use.system.libpath","true");

        // Clamav Setting
        conf.setProperty("malware_lib_path","${name_node}/user/oozie/lib");
        conf.setProperty("malware_library","${malware_lib_path}/binarypig-1.0-SNAPSHOT-jar-with-dependencies.jar");
        conf.setProperty("use_devshm","true");
        conf.setProperty("timeout_ms","180000");
        conf.setProperty("out_put_prefix_path","${name_node}/user/oozie/test/"+output);
        conf.setProperty("in_put_prefix_path", input);

        // Running workflow
        try{
            // Setting a Job
            idjob = client.run(conf);
            log.log(Level.INFO, "Workflow job, " + idjob + "submitted");

            // Print the status every 10 seconds
            while (client.getJobInfo(idjob).getStatus()== WorkflowJob.Status.RUNNING) {
                System.out.println("Workflow  running...");
                Thread.sleep(10*1000);
            }
            log.log(Level.INFO, "Workflow  completed");
            log.log(Level.INFO, "Job ID: " + client.getJobInfo(idjob));
            statusjob= String.valueOf(client.getJobInfo(idjob));

        } catch (Exception r) {
            log.log(Level.INFO, "Errors " + r.getLocalizedMessage());
            r.printStackTrace();
        }

    }

    public String getPath()
    {
        return pathjob;
    }

    public String getIdJob()
    {
        return idjob;
    }

    public String getStatus()
    {
        return statusjob;
    }


}
