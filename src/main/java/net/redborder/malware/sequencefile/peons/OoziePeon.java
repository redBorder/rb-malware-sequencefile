package net.redborder.malware.sequencefile.peons;

import net.redborder.malware.sequencefile.util.ConfigFile;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.barriers.DistributedBarrier;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.apache.log4j.Logger;
import org.apache.oozie.client.OozieClient;
import org.apache.oozie.client.WorkflowJob;

import java.util.Properties;
import java.util.UUID;

public class OoziePeon extends Thread {


    private static final String NAME_NODE = "hdfs://hadoopnamenode.redborder.cluster:8020";
    private static final String RESOURCE_MANAGER = "hadoopresourcemanager.redborder.cluster:8032";
    private static final String OOZIE_SERVER = "http://oozie.redborder.cluster:11000/oozie";

    private static final String OOZIE_LIB = NAME_NODE + "/user/oozie/lib";

    private static final String WORKFLOW_PATH = NAME_NODE + "/user/oozie/workflow";
    private static final String MALWARE_LIB = NAME_NODE + "/user/oozie/workflow/lib/rb-pig-malware.jar";

    private static final String YARA_PATH = NAME_NODE + "/user/oozie/workflow/lib/yara_rules";
    private static final String SCRIPTS_LIB = NAME_NODE + "/user/oozie/workflow/lib/scripts";

    private String pathjob;
    private String idjob;
    private String statusjob;
    private String timeout = ConfigFile.getInstance().getFromGeneral("timeout_ms","180000");
    private String devshm = ConfigFile.getInstance().getFromGeneral("devshm","true");
    private String zk_hosts = ConfigFile.getInstance().getZkConnect();
    private String kafka_brokers = ConfigFile.getInstance().getFromGeneral("kafka_brokers","127.0.0.1:9092");
    private String kafka_topic = ConfigFile.getInstance().getFromGeneral("kafka_topic","rb_malware");

    private String uuid = UUID.randomUUID().toString();

    private static final Logger log = Logger.getLogger(OoziePeon.class);

    CuratorFramework barrierClient = CuratorFrameworkFactory.newClient(ConfigFile.getInstance().getZkConnect(), new ExponentialBackoffRetry(1000, 5));

    DistributedBarrier barrierConfigurator = new DistributedBarrier(barrierClient, "/rb_malware/configurer/barrier");
    public OoziePeon(String pathjob) {
        this.pathjob=pathjob;
    }

    public void run()
    {
        log.trace("At run method");
        log.trace("Starting barrierClient");
        barrierClient.start();
        log.debug("OoziePeon: running");
        log.debug("OoziePeon: scanning file: " + pathjob);

        // Getting a Oozie client
        OozieClient client = new OozieClient(OOZIE_SERVER);

        // Setting configuration
        Properties conf = client.createConfiguration();

        conf.setProperty("name_node", NAME_NODE);
        conf.setProperty("job_tracker", RESOURCE_MANAGER);
        conf.setProperty("queue_name","oozie");

        // Oozie Setting
        conf.setProperty(OozieClient.APP_PATH, WORKFLOW_PATH);
        conf.setProperty("uuid", uuid);
        conf.setProperty("oozie.use.system.libpath","true");
        conf.setProperty("malware_lib_path", OOZIE_LIB);
        conf.setProperty("malware_library", MALWARE_LIB);
        conf.setProperty("zk_hosts", zk_hosts);
        conf.setProperty("kafka_topic", kafka_topic );
        conf.setProperty("kafka_brokers", kafka_brokers);

        // Clamav Setting
        conf.setProperty("use_devshm", devshm);
        conf.setProperty("timeout_ms", timeout);
        conf.setProperty("filesequence_path", pathjob);

        //VirusTotal Setting
        String virustotalApiKey = ConfigFile.getInstance().getFromGeneral("virustotal_api_key","");
        conf.setProperty("virustotal_api_key",  virustotalApiKey != null ? virustotalApiKey : "");

        //MetaScan Setting
        String metaScanApiKey = ConfigFile.getInstance().getFromGeneral("metascan_api_key","");
        conf.setProperty("metascan_api_key", metaScanApiKey != null ? metaScanApiKey : "");

        //Yara Settings
        conf.setProperty("yara_rules", YARA_PATH);
        conf.setProperty("lib_scripts", SCRIPTS_LIB);

        //Cuckoo Settings
        String cuckooServer = ConfigFile.getInstance().getFromGeneral("cuckoo_server","127.0.0.1");
        String cuckoo_instances = ConfigFile.getInstance().getFromGeneral("cuckoo_instances","");
        conf.setProperty("cuckoo_server", cuckooServer);
        String cuckoo_max_retries = ConfigFile.getInstance().getFromGeneral("cuckoo_max_retries","1");
        conf.setProperty("cuckoo_max_retries", cuckoo_max_retries);
        conf.setProperty("cuckoo_instances",cuckoo_instances);

        // Running workflow
        try{
            log.info("Going through the configurator barrier");
            barrierConfigurator.waitOnBarrier();
            log.info("Configurator barrier done");
            // Setting a Job
            idjob = client.run(conf);
            log.info("Workflow job, " + idjob + "submitted");

            // Print the status every 15 seconds
            Integer counter = 0;
            while (client.getJobInfo(idjob).getStatus().equals(WorkflowJob.Status.RUNNING) && counter <= 40) {
                log.info("Job [" + idjob +"] - Status ["+ client.getJobInfo(idjob).getStatus().name() + "] - Time [" + (counter * 15) +" sec]");
                Thread.sleep(15*1000);
                counter ++;
            }

            if(counter >= 40){
                log.warn("The job " + idjob + " is expired kill it!");
                client.kill(idjob);
            }


            log.info("Job [" + idjob +"] - Status ["+ client.getJobInfo(idjob).getStatus().name() + "]");
            statusjob = client.getJobInfo(idjob).getStatus().name();

        } catch (Exception r) {
            log.error( "Errors " + r.getLocalizedMessage());
            r.printStackTrace();
        }
        log.trace("Closing barrierClient");
        barrierClient.close();

    }

    public String getPath()
    {
        return pathjob;
    }

    public String getIdJob()
    {
        return idjob;
    }

    public String getStatus()
    {
        return statusjob;
    }


}
