package net.redborder.malware.sequencefile.managers;

import net.redborder.clusterizer.NotifyListener;
import net.redborder.malware.sequencefile.peons.OoziePeon;
import net.redborder.malware.sequencefile.util.ConfigFile;
import net.redborder.malware.sequencefile.util.logger.RbLogger;
import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.locks.InterProcessSemaphoreMutex;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.codehaus.jackson.map.ObjectMapper;

import java.util.*;
import org.apache.log4j.Logger;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Lito on 11/2/15.
 */
public class OozieManager extends Thread implements NotifyListener {

    private static OozieManager theInstance = null;
    List<String> seqFiles;
    Object monitor = new Object();
    private Logger log = null;
    private boolean running = false;
    CuratorFramework client;
    private Queue<OoziePeon> peons;
    ObjectMapper mapper;
    InterProcessSemaphoreMutex mutex;


    private OozieManager() {

        seqFiles = new ArrayList<>();
        init();
    }



    public static OozieManager getInstance() {
        if (theInstance == null) {
            theInstance = new OozieManager();
            }

        return theInstance;
    }


    private void init() {


        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
        client = CuratorFrameworkFactory.newClient(ConfigFile.getInstance().getZkConnect(), retryPolicy);
        client.start();
        log = RbLogger.getLogger(OozieManager.class);
        peons = new LinkedList<>();
        running = true;
        mapper = new ObjectMapper();
        mutex = new InterProcessSemaphoreMutex(client, "/rb_malware/oozie/mutex");

    }


    @Override
    public void run() {
        while (running) {
            waitTasks();

            // We wait until all peons end up
            while(peons.size()>0) {
                log.debug( "OozieManager:  Peon has ended");


                OoziePeon peon = peons.remove();
                try {
                    peon.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                // Peon has ended

                String taskName = UUID.randomUUID().toString();
                Map<String, Object> map = new HashMap<>();
                map.put("status",peon.getStatus() );
                map.put("path",peon.getIdJob() );
                map.put("idjob",peon.getPath() );

                try {
                    log.debug("Releasing SequenceLeader Semaphore");
                    client.create().forPath("/rb_malware/leases/" + taskName, mapper.writeValueAsBytes(map));
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        }
    }


    @Override
    public void time2Work() {
        log.info( "OozieManager:  A new file is avaliable");
        String children;
        String file = null;

        try {
            // AQUIRE MUTEX
            mutex.acquire();
            // Read of ZK
            children = client.getChildren().forPath("/rb_malware/oozie/peontasks").get(0);
            log.info("Children is: " + children);
            byte[] zkData = client.getData().forPath("/rb_malware/oozie/peontasks/"+children);
            file = new String(zkData, "UTF-8");
            log.info("The new file is: " + file);
            client.delete().forPath("/rb_malware/oozie/peontasks/"+children);
            //RELEASE MUTEX
            mutex.release();

        } catch (Exception e) {
            e.printStackTrace();
        }

        OoziePeon peonWork = new OoziePeon(file);
        //Starting a peon
        peonWork.start();
        peons.add(peonWork);

        synchronized (monitor) {
            monitor.notifyAll();
        }

    }


    public void waitTasks() {
        try {
            synchronized (monitor) {
                monitor.wait();
                log.info( "OozieManager: running");
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void close() {
        running = false;
    }

}
