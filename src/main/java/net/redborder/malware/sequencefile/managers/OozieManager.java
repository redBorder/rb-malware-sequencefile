package net.redborder.malware.sequencefile.managers;

import net.redborder.taskassigner.NotifyListener;
import net.redborder.taskassigner.Task;
import net.redborder.taskassigner.TasksChangedListener;

import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by Lito on 11/2/15.
 */
public class OozieManager extends Thread implements NotifyListener {

    private static OozieManager theInstance = null;
    private static final Object initMonitor = new Object();
    List<String> seqFiles;
    // New variables
    Object monitor = new Object();
    private Logger log = null;
    private boolean running = false;


    public OozieManager() {
        seqFiles = new ArrayList<>();
    }

    /*
    // I think that this method is not needed anymore
    public static OozieManager getInstance() {
        if (theInstance == null) {
            synchronized (initMonitor) {
                try {
                    while (theInstance == null) {
                        initMonitor.wait();
                    }
                } catch (InterruptedException e) {
                    // ignore
                }
            }
        }
        return theInstance;
    }
    */

    public static void init() {
        synchronized (initMonitor) {

            if (theInstance == null) {
                theInstance = new OozieManager();
                theInstance.start();
                initMonitor.notifyAll();


            }

        }

    }

    /*
    // I think that this is not needed anymore
    public static void updateSeqFiles(List<String> seqFiles) {
        if (theInstance != null) {
            theInstance.update(seqFiles);
        }
    }

    public void update(List<String> seqFiles) {
        this.seqFiles.addAll(seqFiles);
    }
    */

    @Override
    public void run() {
        while (true) {
            if (seqFiles.size() > 0) {

                System.out.println("LISTA: " + seqFiles);
                seqFiles.clear();

            } else
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
        }
    }

    /*
     *  New methods
     */

    @Override
    public void time2Work() {
        System.out.println("A new file is avaliable");
    }


    public void waitTasks() {
        try {
            synchronized (monitor) {
                monitor.wait();
                log.log(Level.INFO, "Sequence Manager running");
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void close() {
        running = false;
    }

}
