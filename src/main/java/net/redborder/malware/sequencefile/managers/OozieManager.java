package net.redborder.malware.sequencefile.managers;

import net.redborder.malware.sequencefile.SequenceFile;
import net.redborder.malware.sequencefile.peons.OoziePeon;
import net.redborder.malware.sequencefile.peons.SequencePeon;
import net.redborder.malware.sequencefile.util.ConfigFile;
import net.redborder.malware.sequencefile.util.logger.RbLogger;
import net.redborder.taskassigner.NotifyListener;
import net.redborder.taskassigner.Task;
import net.redborder.taskassigner.TasksChangedListener;
import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.codehaus.jackson.map.ObjectMapper;

import java.io.FileNotFoundException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Created by Lito on 11/2/15.
 */
public class OozieManager extends Thread implements NotifyListener {

    private static OozieManager theInstance = null;
    private static final Object initMonitor = new Object();
    List<String> seqFiles;
    // New variables
    Object monitor = new Object();
    private Logger log = null;
    private boolean running = false;
    CuratorFramework client;
    private Queue<OoziePeon> peons;
    // Aux
    Map<String, Object> maps;
    ObjectMapper mapper;



    public OozieManager() {

        seqFiles = new ArrayList<>();
        init();
    }

    /*
    // I think that this method is not needed
    public static OozieManager getInstance() {
        if (theInstance == null) {
            synchronized (initMonitor) {
                try {
                    while (theInstance == null) {
                        initMonitor.wait();
                    }
                } catch (InterruptedException e) {
                    // ignore
                }
            }
        }
        return theInstance;
    }
    */

    private void init() {
        log = RbLogger.getLogger(OozieManager.class.getName());
        log.log(Level.INFO, "OozieManager:  Running init()");

        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
        client = CuratorFrameworkFactory.newClient(ConfigFile.getInstance().getZkConnect(), retryPolicy);
        client.start();
        log = RbLogger.getLogger(SequenceManager.class.getName());
        peons = new LinkedList<>();
        running = true;


        /*synchronized (initMonitor) {

            if (theInstance == null) {
                theInstance = new OozieManager();
                theInstance.start();
                initMonitor.notifyAll();


            }

        }*/

    }

    /*
    // I think that this is not needed anymore
    public static void updateSeqFiles(List<String> seqFiles) {
        if (theInstance != null) {
            theInstance.update(seqFiles);
        }
    }

    public void update(List<String> seqFiles) {
        this.seqFiles.addAll(seqFiles);
    }
    */

    @Override
    public void run() {
        while (running) {
            waitTasks();

            // We wait until all peons end up
            while(peons.size()>0) {
                log.log(Level.INFO, "OozieManager:  Peon has ended");
                // Peon has ended
                OoziePeon peon = peons.remove();
                // We acquire the semaphore to SequenceLeader
                //String taskName = UUID.randomUUID().toString();
                //client.create().forPath("/rb_malware2/tasks/" + taskName,"mapper.writeValueAsBytes(file.asMap())");

            }
        }
    }

    /*
     *  New methods
     */

    @Override
    public void time2Work() {
        log.log(Level.INFO, "OozieManager:  A new file is avaliable");
        String children;
        String file = null;

        try {
            // Read of ZK
            children = client.getChildren().forPath("/rb_malware2/oozie/peon/tasks").get(0);
            log.log(Level.INFO, "OozieManager:  children is: " + children);
            byte[] zkData = client.getData().forPath("/rb_malware2/oozie/peon/tasks/"+children);
            file = new String(zkData, "UTF-8");
            log.log(Level.INFO, "OozieManager:  the new file is: " + file);
            // Names of SequenceFiles
            // maps = (Map<String, Object>) mapper.readValue(zkData, Map.class);
            client.delete().forPath("/rb_malware2/oozie/peon/tasks/"+children);
        } catch (Exception e) {
            e.printStackTrace();
        }

        OoziePeon peon = new OoziePeon(file);
        //Starting a peon
        peon.start();
        //Peon has ended
        peons.add(peon);

        synchronized (monitor) {
            monitor.notifyAll();
        }

    }


    public void waitTasks() {
        try {
            synchronized (monitor) {
                monitor.wait();
                log.log(Level.INFO, "OozieManager: running");
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void close() {
        running = false;
    }

}
