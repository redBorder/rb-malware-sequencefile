package net.redborder.malware.sequencefile.managers;

import net.redborder.clusterizer.NotifyListener;
import net.redborder.malware.sequencefile.SequenceFile;
import net.redborder.malware.sequencefile.peons.SequencePeon;
import net.redborder.malware.sequencefile.util.ConfigFile;
import net.redborder.malware.sequencefile.util.logger.RbLogger;
import org.apache.curator.RetryPolicy;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.locks.InterProcessSemaphoreMutex;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.codehaus.jackson.map.ObjectMapper;
import org.apache.log4j.Logger;

import java.util.*;


/**
 * Created by andresgomez on 3/2/15.
 */
public class SequenceManager extends Thread implements NotifyListener {

    private Queue<SequencePeon> peons;
    private boolean running = false;
    private static SequenceManager theInstance = null;
    Object monitor = new Object();
    private Logger log = null;
    CuratorFramework client;
    Map<String, Object> maps;
    ObjectMapper mapper;
    InterProcessSemaphoreMutex mutex;


    private SequenceManager() {
        init();
    }

    public synchronized static SequenceManager getInstance() {
        if (theInstance == null) {
            theInstance = new SequenceManager();
        }
        return theInstance;
    }

    private void init() {
        mapper = new ObjectMapper();
        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);
        client = CuratorFrameworkFactory.newClient(ConfigFile.getInstance().getZkConnect(), retryPolicy);
        client.start();
        log = RbLogger.getLogger(SequenceManager.class);
        peons = new LinkedList<>();
        mutex = new InterProcessSemaphoreMutex(client, "/rb_malware/sequence/mutex");

        running = true;
    }

    @Override
    public void run() {
        while (running) {

            waitTasks();

            List<String> hdfsSeqFiles = new ArrayList<>();

            // We wait until all peons end up
            while(peons.size()>0) {
                SequencePeon peon = peons.remove();
                try {
                    peon.join();

                    hdfsSeqFiles.add(peon.getHdfsFile());
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }



            for (String file : hdfsSeqFiles) {
                //We send a sequence file to OozieLeader using /rb_malware/oozie/task
                //log.log(Level.INFO, "Add the file:" + file + " to send to OozieLeader");
                try {
                    //log.log(Level.INFO, "Sequence Manager: sending tasks to OozieLeader");
                    String taskName;
                    taskName = UUID.randomUUID().toString();
                    client.create().forPath("/rb_malware/oozie/tasks/" + taskName ,file.getBytes());
                } catch (Exception e) {
                    System.out.println("Error: SM fail calling OL");
                    e.printStackTrace();

                }

            }

        }
    }


    @Override
    public void time2Work() {

        try {

            if (client.getChildren().forPath("/rb_malware/sequence/tasks").size() > 0) {
                String children;

                try {
                    mutex.acquire();
                    children = client.getChildren().forPath("/rb_malware/sequence/tasks").get(0);
                    byte[] zkData = client.getData().forPath("/rb_malware/sequence/tasks/" + children);
                    maps = (Map<String, Object>) mapper.readValue(zkData, Map.class);
                    client.delete().forPath("/rb_malware/sequence/tasks/" + children);
                    mutex.release();
                } catch (Exception e) {
                    e.printStackTrace();
                }

                SequenceFile sequenceFile = new SequenceFile(maps);
                SequencePeon peon = new SequencePeon(sequenceFile);
                peon.start();
                peons.add(peon);

                notifyTask();
            } else {
                client.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void notifyTask(){
        synchronized (monitor) {
            monitor.notifyAll();
        }
    }

    public void waitTasks() {
        try {
            synchronized (monitor) {
                monitor.wait();

                log.debug("Sequence Manager running");
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }

    public void close() {
        running = false;

    }
}
