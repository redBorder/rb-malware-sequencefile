package net.redborder.malware.sequencefile.util.gridgain;

import com.amazonaws.auth.BasicAWSCredentials;
import org.gridgain.grid.Grid;
import org.gridgain.grid.GridConfiguration;
import org.gridgain.grid.GridException;
import org.gridgain.grid.GridGain;
import org.gridgain.grid.cache.GridCache;
import org.gridgain.grid.cache.GridCacheConfiguration;
import org.gridgain.grid.cache.GridCacheDistributionMode;
import org.gridgain.grid.cache.GridCacheMode;
import org.gridgain.grid.spi.discovery.tcp.GridTcpDiscoverySpi;
import org.gridgain.grid.spi.discovery.tcp.ipfinder.s3.GridTcpDiscoveryS3IpFinder;
import org.gridgain.grid.spi.discovery.tcp.ipfinder.vm.GridTcpDiscoveryVmIpFinder;
import org.ho.yaml.Yaml;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.*;

/**
 * Created by andresgomez on 27/1/15.
 */
public class GridGainManager {

    //TODO: Change gridgain config file path.
    final String GRIDGAIN_CONFIG_FILE = "/opt/rb/var/rb-sequence-oozie/conf/cache.yml";

    private static GridGainManager theInstance = null;
    private Grid grid;
    private List<String> _gridGainServers;
    private String _multicastGroup;
    private Map<String, Object> _s3Config = null;

    private Map<String, Map<String, Object>> malwareCacheLocal;

    public static GridGainManager getInstance() {
        if (theInstance == null) {
            try {
                theInstance = new GridGainManager();
            } catch (GridException e) {
                e.printStackTrace();
            }
        }

        return theInstance;
    }

    private GridGainManager() throws GridException {
        Map<String, Object> gridGainConfig = loadGridGainConfig();

        malwareCacheLocal = new HashMap<>();

        if (!gridGainConfig.containsKey("s3")) {
            _gridGainServers = (List<String>) gridGainConfig.get("servers");
            _multicastGroup = (String) gridGainConfig.get("multicast");
        } else {
            _s3Config = (Map<String, Object>) gridGainConfig.get("s3");
        }

        grid = GridGain.start(initConfig());
    }

    private Map<String, Object> loadGridGainConfig() {
        Map<String, Object> map = null;
        try {
            map = (Map<String, Object>) Yaml.load(new File(GRIDGAIN_CONFIG_FILE));
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        Map<String, Object> general = (Map<String, Object>) map.get("general");
        return (Map<String, Object>) general.get("gridgain");

    }

    private GridConfiguration initConfig() {
        GridConfiguration conf = new GridConfiguration();
        List<GridCacheConfiguration> caches = new ArrayList<GridCacheConfiguration>();
        GridTcpDiscoverySpi gridTcp = new GridTcpDiscoverySpi();

        if (_s3Config == null) {
            GridTcpDiscoveryVmIpFinder gridIpFinder = new GridTcpDiscoveryVmIpFinder();

            Collection<InetSocketAddress> ips = new ArrayList<>();

            try {
                conf.setLocalHost(InetAddress.getLocalHost().getHostName());
            } catch (UnknownHostException e) {
                e.printStackTrace();
            }

            if (_gridGainServers != null) {
                for (String server : _gridGainServers) {
                    String[] serverPort = server.split(":");
                    ips.add(new InetSocketAddress(serverPort[0], Integer.valueOf(serverPort[1])));
                }

                gridIpFinder.registerAddresses(ips);
            }

            gridTcp.setIpFinder(gridIpFinder);

        } else {
            GridTcpDiscoveryS3IpFinder s3IpFinder = new GridTcpDiscoveryS3IpFinder();
            s3IpFinder.setBucketName(_s3Config.get("bucket").toString());
            s3IpFinder.setAwsCredentials(new BasicAWSCredentials(_s3Config.get("access_key").toString(), _s3Config.get("secret_key").toString()));
            gridTcp.setIpFinder(s3IpFinder);
        }

        conf.setDiscoverySpi(gridTcp);

        GridCacheConfiguration cacheMalware = new GridCacheConfiguration();
        cacheMalware.setName("malware");
        cacheMalware.setDistributionMode(GridCacheDistributionMode.CLIENT_ONLY);
        cacheMalware.setCacheMode(GridCacheMode.PARTITIONED);
        caches.add(cacheMalware);

        conf.setCacheConfiguration(caches.toArray(new GridCacheConfiguration[caches.size()]));

        return conf;
    }

    private <K, V> GridCache<K, V> getCache(String cacheName) {
        return grid.cache(cacheName);
    }

    public GridCache<String, Map<String, Object>> getMalwareCache() {
        return getCache("malware");
    }

    public void addMalwareCache(String key, Map<String, Object> value) {
        malwareCacheLocal.put(key, value);
    }

    public void uploadCache() {
        try {
            getMalwareCache().putAll(malwareCacheLocal);
        } catch (GridException e) {
            e.printStackTrace();
        }
        malwareCacheLocal.clear();
    }

    public Boolean isNeedToDelete(String md5) {

        Boolean needToDelete = true;

        try {
            Map<String, Object> fileData = getMalwareCache().get(md5);
            if (fileData == null) {
                needToDelete = false;
            }
        } catch (GridException e) {
            e.printStackTrace();
        }

        return needToDelete;
    }
}
