package net.redborder.malware.sequencefile.util;

import java.util.List;
import java.util.Map;
import java.io.File;
import java.io.IOException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import net.redborder.malware.sequencefile.util.logger.RbLogger;
import org.apache.curator.framework.CuratorFramework;
import org.apache.curator.framework.CuratorFrameworkFactory;
import org.apache.curator.framework.recipes.barriers.DistributedBarrier;
import org.apache.curator.retry.ExponentialBackoffRetry;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;


/**
 * Created by Lito on 23/3/15.
 */


public class ConfigFileModifier {

    private final String WORKFLOW_FILE_PATH = "/opt/rb/var/rb-sequence-oozie/workflow/workflow.xml";
    private List<String> loaders;
    private ConfigFile configfile;
    private Logger log;
    DistributedBarrier barrierConfigurator;
    CuratorFramework client;

    public ConfigFileModifier() throws Exception {
        ConfigFile.init();
        configfile = ConfigFile.getInstance();
        loaders = configfile.getLoaders();
        client = CuratorFrameworkFactory.newClient(ConfigFile.getInstance().getZkConnect(), new ExponentialBackoffRetry(1000, 5));

        client.start();
        if (client.checkExists().forPath("/rb_malware/configurer") == null) {
            client.create().creatingParentsIfNeeded().forPath("/rb_malware/configurer");
        }
        barrierConfigurator = new DistributedBarrier(client, "/rb_malware/configurer/barrier");
        barrierConfigurator.setBarrier();
    }


    public void setConfiguration() {
        try {
            log = RbLogger.getLogger(ConfigFileModifier.class);
            log.info("Loaders to use: " + loaders);
            DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(WORKFLOW_FILE_PATH);


            Node start = doc.getElementsByTagName("start").item(0);

            log.info("Start loader is: " + loaders.get(0));
            NamedNodeMap attr = start.getAttributes();
            Node nodeAttr = attr.getNamedItem("to");
            nodeAttr.setTextContent(loaders.get(0));


            if (loaders.size() > 1) {
                for (int i = 0; i < doc.getElementsByTagName("action").getLength(); i++) {
                    Node action = doc.getElementsByTagName("action").item(i);

                    int index = loaders.indexOf(action.getAttributes().getNamedItem("name").getNodeValue());

                    if ((index + 1) < loaders.size() && index != -1 && !action.getAttributes().getNamedItem("name").getNodeValue().equals("delete")) {

                        for (int k = 0; k < doc.getElementsByTagName("action").item(i).getChildNodes().getLength(); k++) {
                            if (action.getChildNodes().item(k).getNodeName().equals("ok")) {
                                action.getChildNodes().item(k).getAttributes().getNamedItem("to").setTextContent(loaders.get(index + 1));
                                log.info("Linking " + action.getAttributes().getNamedItem("name").getNodeValue() + " to " + loaders.get(index + 1));
                            }
                        }
                    }
                }
            }

            String toend = loaders.get(loaders.size() - 1);
            NodeList end = doc.getElementsByTagName("action");
            for (int j = 0; j < end.getLength(); j++) {
                if (end.item(j).getAttributes().getNamedItem("name").getNodeValue().equals(toend)) {
                    for (int k = 0; k < end.item(j).getChildNodes().getLength(); k++) {
                        if (end.item(j).getChildNodes().item(k).getNodeName().equals("ok")) {
                            end.item(j).getChildNodes().item(k).getAttributes().getNamedItem("to").setTextContent("delete");
                            log.info("End loader is: " + loaders.get(loaders.size() - 1));
                        }
                    }
                }
            }

            NodeList actions = doc.getElementsByTagName("action");

            for (int j = actions.getLength() - 1; j > -1; j--) {
                if (loaders.contains(actions.item(j).getAttributes().getNamedItem("name").getNodeValue())) {
                    log.info("Saving " + actions.item(j).getAttributes().getNamedItem("name").getNodeValue() + " to workflow.");
                } else if (!actions.item(j).getAttributes().getNamedItem("name").getNodeValue().equals("delete")) {
                    log.info("Removing " + actions.item(j).getAttributes().getNamedItem("name").getNodeValue() + " from workflow.");
                    actions.item(j).getParentNode().removeChild(doc.getElementsByTagName("action").item(j));
                }
            }


            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new File("/opt/rb/var/rb-sequence-oozie/workflow/workflow2hdfs.xml"));
            transformer.transform(source, result);
            log.info("");
            log.info("Updating HDFS files.");
            Process p;

            p = Runtime.getRuntime().exec("hdfs dfs -rm -r /user/oozie/workflow");
            p.waitFor();
            log.info("HDFS workflowDir removed.");

            p = Runtime.getRuntime().exec("hdfs dfs -mkdir /user/oozie/workflow");
            p.waitFor();
            p = Runtime.getRuntime().exec("hdfs dfs -mkdir /user/oozie/workflow/lib");
            p.waitFor();
            log.info("HDFS workflowDir created.");

            p = Runtime.getRuntime().exec("hdfs dfs -put /opt/rb/var/rb-sequence-oozie/workflow/workflow2hdfs.xml /user/oozie/workflow/workflow.xml");
            p.waitFor();
            log.info("HDFS workflow uploaded.");

            p = Runtime.getRuntime().exec("hdfs dfs -put /opt/rb/var/rb-sequence-oozie/workflow/lib/rb-malware-pig.jar /user/oozie/workflow/lib/rb-pig-malware.jar");
            p.waitFor();
            log.info("HDFS rb-pig-malware.jar uploaded.");

            p = Runtime.getRuntime().exec("hdfs dfs -put /opt/rb/var/rb-sequence-oozie/workflow/scripts /user/oozie/workflow/scripts");
            p.waitFor();
            log.info("HDFS scripts uploaded.");

            p = Runtime.getRuntime().exec("hdfs dfs -put /opt/rb/var/rb-sequence-oozie/config/gridgain.yml /user/oozie/gridgain.yml");
            p.waitFor();
            log.info("HDFS gridgain.yml uploaded.");

            barrierConfigurator.removeBarrier();
            client.close();
            log.info("HDFS files done");

        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } catch (TransformerException tfe) {
            tfe.printStackTrace();
        } catch (IOException ioe) {
            ioe.printStackTrace();
        } catch (SAXException sae) {
            sae.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

